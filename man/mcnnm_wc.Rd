% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{mcnnm_wc}
\alias{mcnnm_wc}
\title{This function trains all models for given vectors of lambda_L and lambda_B. Each model contains L, u, v, lambda_B, and lambda_B.}
\usage{
mcnnm_wc(M, C, mask, W, to_normalize = 1L, num_lam_L = 30L, num_lam_B = 30L,
  lambda_L = as.numeric(c()), lambda_B = as.numeric(c()),
  to_estimate_u = 1L, to_estimate_v = 1L,
  niter = 100L, rel_tol = 1e-05, is_quiet = 1L)
}
\arguments{
\item{M}{Matrix of observed entries. The input should be N (number of units) by T (number of time periods).}

\item{C}{Matrix containing time -and unit-related covariates. The dimensions of C should match those of M. If time- and unit-related covariates do not exist C = matrix(0L,0,0,0,0) should be used as input.}

\item{mask}{Binary mask with the same shape as M containing observed entries.}

\item{W}{Matrix of weights. The input should be N (number of units) by T (number of time periods).}

\item{to_normalize}{Optional boolean parameter indicating whether to normalize covariates or not (columns of C). The default value is 1. If this value is set to 0, the result would be sensitive to scales in covariates.}

\item{num_lam_L}{Optional parameter on the number of lambda_Ls to consider for learning. The default number is 30 and lambda_L values are from minimum number which makes L zero to 1e-3 times this minimum number.}

\item{num_lam_B}{Optional parameter on the number of lambda_Bs to consider for learning. The default number is 30 and lambda_H values are from minimum number which makes H zero to 1e-3 times this minimum number.}

\item{lambda_L}{Optional numeric vector containing all lambda_L values that user want to train model on sorted decreasingly (important for warm-start). By default this is empty (user need not to provide this) and num_lam_L and the rule explained above is used. However, once this vector is passed by user manually, num_lam_L argument will not be used.}

\item{lambda_B}{Optional numeric vector containing all lambda_H values that user want to train model on sorted decreasingly (important for warm-start). By default this is empty (user need not to provide this) and num_lam_B and the rule explained above is used. However, once this vector is passed by user manually, num_lam_B argument will not be used.}

\item{to_estimate_u}{Optional boolean input for wheter estimating fixed unit effects (row means of M) or not. Default is 1.}


\item{niter}{Optional parameter on the number of iterations taken in the algorithm for each fixed value of lambda_L. The default value is 1000 and it is sufficiently large as the algorithm is using warm-start strategy.}

\item{rel_tol}{Optional parameter on the stopping rule. Once the relative improve in objective value drops below rel_tol, execution is halted. Default value is 1e-5.}

\item{is_quiet}{Optional boolean input which indicates whether to print the status of learning and convergence results for Cyclic Coordinate Descent algorithm or not. The default value is 1 (no output is printed).}
}
\value{
The list of all models trained with the given vector of lambda_Ls and lambda_Bs.
}
\description{
This function trains all models for given vectors of lambda_L and lambda_B. Each model contains L, B, u, v, lambda_L and lambda_B.
}
\examples{
mcnnm_wc(M = replicate(5,rnorm(5)), C = replicate(5,rnorm(5)), mask = matrix(rbinom(5*5,1,0.8),5,5), W = matrix(runif(5*5,0,1),5,5), lambda_L=c(5,1,0.5,0.1), lambda_B=c(5,1,0.5,0.1))
}
\seealso{
\code{\link{mcnnm}}
}
